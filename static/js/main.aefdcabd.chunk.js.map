{"version":3,"sources":["assets/Pokeball-PNG-Photos.png","BattleScreen.js","Home.js","Winner.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BattleScreen","props","className","passPokemonInfo","pokemonOneName","pokemonOneCardsValue","pokemonOneCards","map","card","key","code","src","image","alt","disabled","buttonDisabledOne","onClick","pokemonOneDrawCard","pokemonOneStandButton","pokemonOneImg","pokemonTwoImg","pokemonTwoName","pokemonTwoCardsValue","pokemonTwoCards","buttonDisabledTwo","pokemonTwoDrawCard","pokemonTwoCheckScoreButton","tieGame","to","winnerDisabled","Home","pokeball","Winner","passState","pokemonOneWins","pokemonOneEvolvedName","pokemonTwoEvolvedName","pokemonOneEvolvedImg","pokemonTwoEvolvedImg","Footer","App","getPokemonOne","numGenerator","Math","floor","random","axios","url","responseType","method","then","res","evolutionApiArray","data","chain","evolves_to","length","pokemonName","species","name","evolvedPokemonName","setState","imagePromises","pokemonImagePromise","setTimeout","push","evolvedPokemonImagePromise","Promise","all","sprites","front_default","getPokemonTwo","getDeckOfCards","deckId","deck_id","getPokemonOneInitialCards","getPokemonTwoInitialCards","state","response","cards","playerOneCards","forEach","value","suit","playerTwoCards","drawCardPokemonOne","newCard","newCardsArray","cardValuesArray","faceCards","includes","parseInt","pokemonOneTotal","reduce","a","b","indexOf","drawCardPokemonTwo","pokemonTwoTotal","checkPokemonOneScore","checkPokemonTwoScore","standButtonPokemonTwo","standButtonPokemonOne","playerOneScore","playerTwoScore","pokemonTwoWins","noWinners","componentDidMount","deckOfCards","anyPokemonCardsValue","basename","process","exact","path","component","render","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aefdcabd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Pokeball-PNG-Photos.8e2ff0b0.png\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './styles.css';\n\nconst BattleScreen = (props) => {\n\n        return (\n            <div className=\"wrapper windowB\">\n                <h1>Let the battle begin!</h1>\n                <div className=\"gameContainer\">\n                    <div className=\"pokemonOneContainer\"> \n                        <div className=\"gameDetails\">\n                            <p>Player One</p>\n                            <p>{props.passPokemonInfo.pokemonOneName}</p>\n                            <p>{props.passPokemonInfo.pokemonOneCardsValue}</p>\n                            {\n                                    props.passPokemonInfo.pokemonOneCardsValue > 21 \n                                    ? <p>You've busted!</p>\n                                    : <p></p>\n                            }\n                            <div className=\"pokemonCards\">\n                            {\n                                props.passPokemonInfo.pokemonOneCards.map( (card) => {\n                                    return (\n                                        <div key={card.code}>\n                                            <img src={card.image} alt=\"\" className=\"card\"/>\n                                        </div>\n                                    )\n                                })\n                            }\n                            </div>\n                            <button disabled={props.passPokemonInfo.buttonDisabledOne}  className=\"drawCard\" onClick={ props.pokemonOneDrawCard }>Draw Card</button>\n                            <button disabled={props.passPokemonInfo.buttonDisabledOne} className=\"stand\" onClick={ props.pokemonOneStandButton }>Stand</button>\n                        </div>\n                        <div className=\"pokemonImgContainer\">\n                            <img src={props.passPokemonInfo.pokemonOneImg} alt=\"\"/>\n                        </div>\n                    </div>\n                    <div className=\"pokemonTwoContainer\">\n                        <div className=\"pokemonImgContainer\">\n                            <img src={props.passPokemonInfo.pokemonTwoImg} alt=\"\"/>\n                        </div>\n                        <div className=\"gameDetails\">\n                            <p>Player Two</p>\n                            <p>{props.passPokemonInfo.pokemonTwoName}</p>\n                            <p>{props.passPokemonInfo.pokemonTwoCardsValue}</p>\n                            \n                                {\n                                    props.passPokemonInfo.pokemonTwoCardsValue > 21 \n                                    ? <p>You've busted!</p>\n                                    : <p></p>\n                                }\n                            \n                            <div className=\"pokemonCards\">\n                            {\n                                props.passPokemonInfo.pokemonTwoCards.map( (card) => {\n                                    return (\n                                        <div key={card.code}>\n                                            <img src={card.image} alt=\"\" className=\"card\"/>\n                                        </div>\n                                    )\n                                })\n                            }\n                            </div>\n                            <button disabled={props.passPokemonInfo.buttonDisabledTwo} className=\"drawCard\" onClick={ props.pokemonTwoDrawCard }>Draw Card</button>\n                            <button disabled={props.passPokemonInfo.buttonDisabledTwo} className=\"stand\" onClick={ props.pokemonTwoCheckScoreButton }>Stand</button>\n                        </div>\n                    </div>\n                    <div className=\"notificationsContainer\">\n                        {\n                        props.passPokemonInfo.tieGame === true \n                        ? <div><h2>It's a tie game!</h2><Link to=\"/\" className=\"buttonStyle\">Play Again</Link></div>\n                        : <h2></h2>\n                        }\n                        {\n                        props.passPokemonInfo.pokemonOneCardsValue > 21 && props.passPokemonInfo.pokemonTwoCardsValue > 21\n                        ? <Link to=\"/\">Both players are bust! Click here to play again.</Link>\n                        : <h2></h2>\n                        }\n                    </div>\n                    <Link to=\"/Winner\" className={ props.passPokemonInfo.winnerDisabled ? \"hidden\" : \"visible\"}>Winner Evolution</Link>\n                </div>\n            </div>\n        )\n}\n\n\nexport default BattleScreen; ","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport pokeball from \"./assets/Pokeball-PNG-Photos.png\";\n\nconst Home = () => {\n        return (\n            <div className=\"wrapper windowA\">\n                <header>\n                    <div className=\"headerTextContainer\">\n                    <h1 className=\"headerText\">PokeDealers presents Pokemon Blackjack</h1>\n                    </div>\n                    \n                </header>\n                <section className=\"instructionSection\">\n                    <div className=\"pokeBallImage\">\n                        <img src={pokeball} alt=\"\"/>\n                    </div>\n                    <ul>\n                        <li>The goal of pokemon blackjack is to beat your opponent's hand without going over 21.</li>\n                        <li>Whoever is closest to 21 without going over is the winner. Going over 21 will result in busting. (which is a loss)</li>\n                        <li>You can choose to stand or hit(to draw another card).</li>\n                        <li>Face cards are worth 10</li>\n                        <li>Ace can be worth 11 or 1 depending on if your cards exceed 21, if they do, ace will become worth 1.</li>\n                        <li>If you win, you may get a chance to see something special!</li>\n                    </ul>\n                </section>\n\n                <Link to=\"/BattleScreen\">\n                    <button>Start Game</button></Link>\n            </div>\n        )\n    }\n\n\nexport default Home;\n","import React from 'react'\nimport './styles.css';\nimport { Link } from 'react-router-dom';\n\n\nconst Winner = (props) => {\n\n    return (\n        <div className=\"wrapper specialTextContainer windowC\">\n            <h1 className=\"specialText\">Congratulations!</h1>\n            <div className=\"winnerContainer\">\n                {\n                    props.passState.pokemonOneWins === true \n                    ? <h2>Congratulations Player One, you've won!</h2>\n                    : <h2>Congratulations Player Two, you've won!</h2>\n                }\n                {\n                    props.passState.pokemonOneWins === true \n                    ? <h2><span>{props.passState.pokemonOneName}</span> has evolved into <span>{props.passState.pokemonOneEvolvedName}</span>!</h2>\n                    : <h2><span>{props.passState.pokemonTwoName}</span> has evolved into <span>{props.passState.pokemonTwoEvolvedName}</span>!</h2>\n                }\n                <div className=\"winnerImageContainer\">\n                    {\n                        props.passState.pokemonOneWins === true \n                        ? <img src={props.passState.pokemonOneEvolvedImg} alt=\"\"/>\n                        : <img src={props.passState.pokemonTwoEvolvedImg} alt=\"\"/>\n                    }\n                </div>\n                <Link to=\"/\" className=\"buttonStyle\">Play Again</Link>\n            </div>\n        </div>\n    )\n}\n\nexport default Winner;\n","import React from 'react';\nimport './styles.css';\n\nconst Footer = () => {\n    return (\n        <footer>\n            <p>Created by Ari Charikar, Steve McMullin, & Winnie Ku</p>\n        </footer>\n        \n    )\n\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom' \nimport axios from 'axios'\nimport BattleScreen from './BattleScreen';\nimport Home from './Home';\nimport Winner from './Winner';\nimport Footer from './Footer';\nimport './styles.css';\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            pokemonOneName: \"\",\n            pokemonOneImg: [],\n            pokemonOneEvolvedName: \"\",\n            pokemonOneEvolvedImg: [],\n            pokemonTwoName: \"\",\n            pokemonTwoImg: [], \n            pokemonTwoEvolvedName: \"\",\n            pokemonTwoEvolvedImg: [],\n            pokemonOneCards: [],\n            pokemonTwoCards: [],\n            deckOfCards: [],\n            deckId: \"\",\n            anyPokemonCardsValue: \"\",\n            pokemonOneCardsValue: \"\",\n            pokemonTwoCardsValue: \"\",\n            pokemonOneWins: false,\n            pokemonTwoWins: false,\n            noWinners: false,\n            tieGame: false,\n            buttonDisabledOne: false,\n            buttonDisabledTwo: true,\n            winnerDisabled: true,\n        }\n    }\n\n    // ********** POKEMON FUNCTIONS **********\n\n    // Function to get pokemonOne\n    getPokemonOne = () => {\n        const numGenerator = Math.floor(Math.random() * 151);\n        // API call to the Pokemon Evolution Chain Endpoint\n        axios({\n            url: `https://pokeapi.co/api/v2/evolution-chain/${numGenerator}/`,\n            responseType: `json`,\n            method: `GET`\n        })\n        .then((res) => {\n            const evolutionApiArray = res.data.chain.evolves_to;\n            // check to see if there is an evolution array; if no, call the same function again\n            if (evolutionApiArray.length === 0) {\n                this.getPokemonOne()\n            } else {\n            // if yes, save the pokemon name and evolved pokemon name into variables\n                const pokemonName = res.data.chain.species.name;\n                const evolvedPokemonName = evolutionApiArray[0].species.name;\n\n                // set state for pokemonOneName and pokemonOneEvolvedName\n                // const winnie = `pokemon${pokemonNumber}Name`\n                // this.state[`pokemon${pokemonNumber}Name`]\n                this.setState({\n                    pokemonOneName: pokemonName,\n                    pokemonOneEvolvedName: evolvedPokemonName\n                })\n\n                // Create empty array for Pokemon image promises \n                const imagePromises =[];\n\n                // Axios promise for getting the image for pokemonOne\n                const pokemonImagePromise = axios({\n                    url: `https://pokeapi.co/api/v2/pokemon/${pokemonName}`,\n                    responseType: `json`,\n                    method: `GET`\n                })\n\n                setTimeout(imagePromises.push(pokemonImagePromise), 100);\n\n                // Axios promise for getting the image for the evolved version of pokemonOne\n                const evolvedPokemonImagePromise = axios({\n                    url: `https://pokeapi.co/api/v2/pokemon/${evolvedPokemonName}`,\n                    responseType: `json`,\n                    method: `GET`\n                })\n\n                setTimeout(imagePromises.push(evolvedPokemonImagePromise), 100);\n\n                // When both Promises are fulfilled, set state for both pokemon one's images\n                Promise.all(imagePromises).then((res) => {\n                    this.setState({\n                        pokemonOneImg: res[0].data.sprites.front_default,\n                        pokemonOneEvolvedImg: res[1].data.sprites.front_default\n                    })\n                })\n            }\n        })\n    }\n\n    // Function to get pokemonTwo\n    getPokemonTwo = () => {\n        const numGenerator = Math.floor(Math.random() * 151);\n        // API call to the Pokemon Evolution Chain Endpoint\n        axios({\n            url: `https://pokeapi.co/api/v2/evolution-chain/${numGenerator}/`,\n            responseType: `json`,\n            method: `GET`\n        })\n        .then((res) => {\n            const evolutionApiArray = res.data.chain.evolves_to;\n            // check to see if there is an evolution array; if no, call the same function again\n            if (evolutionApiArray.length === 0) {\n                this.getPokemonTwo()\n            } else {\n                // if yes, save the pokemon name and evolved pokemon name into variables\n                const pokemonName = res.data.chain.species.name;\n                const evolvedPokemonName = evolutionApiArray[0].species.name;\n\n                // set state for pokemonTwoName and pokemonTwoEvolvedName\n                this.setState({\n                    pokemonTwoName: pokemonName,\n                    pokemonTwoEvolvedName: evolvedPokemonName\n                })\n\n                // Create empty array for Pokemon image promises \n                const imagePromises =[];\n\n                // Axios promise for getting the image for pokemonTwo\n                const pokemonImagePromise = axios({\n                    url: `https://pokeapi.co/api/v2/pokemon/${pokemonName}`,\n                    responseType: `json`,\n                    method: `GET`\n                })\n\n                setTimeout(imagePromises.push(pokemonImagePromise), 100);\n\n                // Axios promise for getting the image for the evolved version of pokemonTwo\n                const evolvedPokemonImagePromise = axios({\n                    url: `https://pokeapi.co/api/v2/pokemon/${evolvedPokemonName}`,\n                    responseType: `json`,\n                    method: `GET`\n                })\n\n                setTimeout(imagePromises.push(evolvedPokemonImagePromise), 100);\n\n                // When both Promises are fulfilled, set state for both pokemon two's images\n                Promise.all(imagePromises).then((res) => {\n                    this.setState({\n                        pokemonTwoImg: res[0].data.sprites.front_default,\n                        pokemonTwoEvolvedImg: res[1].data.sprites.front_default\n                    })\n                })\n            }\n        })\n    }\n\n    // ********** DECK OF CARD FUNCTIONS **********\n\n    // Function to get a new deck of cards from the new card endpoint (with deck_id) \n    getDeckOfCards = () => {\n        axios({\n            url: `https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1`,\n            responseType: 'json',\n            method: 'GET',\n        })\n        .then ((res) => {\n            // set state for deckId for easier re-usability \n            this.setState({\n                deckId: res.data.deck_id\n            })\n            // Based on this deckId, call functions for getting pokemonOne and pokemonTwo's initial two cards\n            setTimeout(this.getPokemonOneInitialCards(), 100);\n            setTimeout(this.getPokemonTwoInitialCards(), 400);\n        })\n    }\n\n    // Function for getting pokemonOne's first two cards from the draw card endpoint\n    getPokemonOneInitialCards = () => {\n        const deckId = this.state.deckId;\n        axios({\n            url: `https://deckofcardsapi.com/api/deck/${deckId}/draw/?count=2`,\n            responseType: 'json',\n            method: 'GET',\n        })\n        .then ((response) => {\n            const cards = response.data.cards;\n            // First, create empty array called playerOneCards, which will then be filled with results from the API, and then be set to state for pokemonOneCards\n            const playerOneCards = [];\n\n            // Loop through the API array result with .forEach, and push the value, image, suit, and code to the empty playerOneCards array\n            cards.forEach((card) => {\n                playerOneCards.push({\n                    value: card.value,\n                    image: card.image,\n                    suit: card.suit,\n                    code: card.code\n                })\n            })\n\n            // Set state so that the previously empty pokemonOneCards array in state is now set with the playerOneCards array, which holds the value, image, suit, and code \n            this.setState({\n                pokemonOneCards: playerOneCards\n            })\n        })\n    }\n\n    // Function for getting pokemonTwo's first two cards from the draw card endpoint \n    getPokemonTwoInitialCards = () => {\n        const deckId = this.state.deckId;\n        axios({\n            url: `https://deckofcardsapi.com/api/deck/${deckId}/draw/?count=2`,\n            responseType: 'json',\n            method: 'GET',\n        })\n        .then ((response) => {\n            const cards = response.data.cards;\n            // First, create empty array called playerTwoCards, which will then be filled with results from the API, and then be set to state for pokemonTwoCards\n            const playerTwoCards = [];\n\n            // Loop through the API array result with .forEach, and push the value, image, suit, and code to the empty playerTwoCards array\n            cards.forEach((card) => {\n                playerTwoCards.push({\n                    value: card.value,\n                    image: card.image,\n                    suit: card.suit,\n                    code: card.code\n                })\n            })\n\n            // Set state so that the previously empty pokemonTwoCards array in state is now set with the playerTwoCards array, which holds the value, image, suit, and code \n            this.setState({\n                pokemonTwoCards: playerTwoCards\n            })\n        })\n    }\n\n    // Function for when Pokemon One clicks \"Draw Card\"\n    drawCardPokemonOne = () => {\n        const deckId = this.state.deckId;\n        // Make a call to the draw cards endpoint, using the same deckId as before, and only for 1 card\n        axios ({\n            url: `https://deckofcardsapi.com/api/deck/${deckId}/draw/?count=1`,\n            method: `GET`,\n            responseType: `json`\n        })\n        .then((res) => {\n            // Store the 1 new card in a variable\n            const newCard = res.data.cards[0]\n\n            // Make a duplicate of the this.state.pokemonOneCards array, which currently has just the initial two cards in it\n            const newCardsArray = [...this.state.pokemonOneCards];\n\n            // Push the new card into the newCardsArray, and re-set state so that pokemonOneCards is now the newCardsArray (so there should be 3 cards in there now)\n            newCardsArray.push(newCard);\n\n            this.setState({\n                pokemonOneCards: newCardsArray\n            })\n\n            const cardValuesArray = [];\n        \n            const faceCards = [\"QUEEN\", \"KING\", \"JACK\"];\n\n            // Need to loop through the cards, and change the values for the faceCards to be 10, the value of the Ace to be 11, and to change the values that are strings into numbers; push the values to cardValuesArray\n            this.state.pokemonOneCards.forEach((card) => {\n                if (faceCards.includes(card.value)) {\n                    cardValuesArray.push(10);\n                } else if (card.value === \"ACE\") {\n                    cardValuesArray.push(11);\n                } else {\n                    cardValuesArray.push(parseInt(card.value))\n                }\n            })\n\n            // Get the total of the values of the array\n            let pokemonOneTotal = cardValuesArray.reduce((a, b) => a + b, 0);\n\n            // Check for if pokemonOne's total is greater than 21, and if there is an Ace in the hand; if yes, change the value of the Ace to 1\n            while (pokemonOneTotal > 21 && cardValuesArray.includes(11)) {\n                cardValuesArray[cardValuesArray.indexOf(11, 0)] = 1;\n                pokemonOneTotal = cardValuesArray.reduce((a, b) => a + b, 0);\n            }\n            \n            this.setState({\n                pokemonOneCardsValue: pokemonOneTotal\n            })\n            if (pokemonOneTotal > 21) {\n                this.setState({\n                    buttonDisabledOne: true,\n                    buttonDisabledTwo: false\n                })\n            }\n        })    \n    }\n\n    // Function for when Pokemon Two clicks \"Draw Card\"\n    drawCardPokemonTwo = () => {\n        const deckId = this.state.deckId;\n        // Make a call to the draw cards endpoint, using the same deckId as before, and only for 1 card\n        axios ({\n            url: `https://deckofcardsapi.com/api/deck/${deckId}/draw/?count=1`,\n            method: `GET`,\n            responseType: `json`\n        })\n        .then((res) => {\n            // Store the 1 new card in a variable\n            const newCard = res.data.cards[0]\n\n            // Make a duplicate of the this.state.pokemonTwoCards array, which currently has just the initial two cards in it\n            const newCardsArray = [...this.state.pokemonTwoCards];\n\n            // Push the new card into the newCardsArray, and re-set state so that pokemonTwoCards is now the newCardsArray (so there should be 3 cards in there now)\n            newCardsArray.push(newCard);\n            this.setState({\n                pokemonTwoCards: newCardsArray\n            })\n\n            const cardValuesArray = [];\n        \n            const faceCards = [\"QUEEN\", \"KING\", \"JACK\"];\n\n            // Need to loop through the cards, and change the values for the faceCards to be 10, the value of the Ace to be 11, and to change the values that are strings into numbers; push the values to cardValuesArray\n            this.state.pokemonTwoCards.forEach((card) => {\n                if (faceCards.includes(card.value)) {\n                    cardValuesArray.push(10);\n                } else if (card.value === \"ACE\") {\n                    cardValuesArray.push(11);\n                } else {\n                    cardValuesArray.push(parseInt(card.value))\n                }\n            })\n\n            // Get the total of the values of the array\n            let pokemonTwoTotal = cardValuesArray.reduce((a, b) => a + b, 0);\n\n            // Check for if pokemonOne's total is greater than 21, and if there is an Ace in the hand; if yes, change the value of the Ace to 1\n            while (pokemonTwoTotal > 21 && cardValuesArray.includes(11)) {\n                cardValuesArray[cardValuesArray.indexOf(11, 0)] = 1;\n                pokemonTwoTotal = cardValuesArray.reduce((a, b) => a + b, 0);\n            }\n            \n            this.setState({\n                pokemonTwoCardsValue: pokemonTwoTotal\n            })   \n\n            if (pokemonTwoTotal > 21) {\n                this.setState({\n                    buttonDisabledTwo: true\n                })\n            }\n\n        })\n    }\n\n    // Function for checking the value of Pokemon One's cards\n    checkPokemonOneScore = () => {\n        //Empty array which will be filled with the values of the cards in this.state.pokemonOneCards\n        const cardValuesArray = [];\n        \n        const faceCards = [\"QUEEN\", \"KING\", \"JACK\"];\n\n        // Need to loop through the cards, and change the values for the faceCards to be 10, the value of the Ace to be 11, and to change the values that are strings into numbers; push the values to cardValuesArray\n        this.state.pokemonOneCards.forEach((card) => {\n            if (faceCards.includes(card.value)) {\n                cardValuesArray.push(10);\n            } else if (card.value === \"ACE\") {\n                cardValuesArray.push(11);\n            } else {\n                cardValuesArray.push(parseInt(card.value))\n            }\n        })\n\n        // Get the total of the values of the array\n        let pokemonOneTotal = cardValuesArray.reduce((a, b) => a + b, 0);\n\n        // Check for if pokemonOne's total is greater than 21, and if there is an Ace in the hand; if yes, change the value of the Ace to 1\n        while (pokemonOneTotal > 21 && cardValuesArray.includes(11)) {\n            cardValuesArray[cardValuesArray.indexOf(11, 0)] = 1;\n            pokemonOneTotal = cardValuesArray.reduce((a, b) => a + b, 0);\n        }\n\n        // Set state for pokemonOneCardsValue to be the total value of their cards\n        this.setState({\n            pokemonOneCardsValue: pokemonOneTotal\n        })\n    }\n\n    // Function for checking the value of Pokemon Two's cards\n    checkPokemonTwoScore = () => {\n        //Empty array which will be filled with the values of the cards in this.state.pokemonTwoCards\n        const cardValuesArray = [];\n        \n        const faceCards = [\"QUEEN\", \"KING\", \"JACK\"];\n\n        // Need to loop through the cards, and change the values for the faceCards to be 10, the value of the Ace to be 11, and to change the values that are strings into numbers; push the values to cardValuesArray\n        this.state.pokemonTwoCards.forEach((card) => {\n            if (faceCards.includes(card.value)) {\n                cardValuesArray.push(10);\n            } else if (card.value === \"ACE\") {\n                cardValuesArray.push(11);\n            } else {\n                cardValuesArray.push(parseInt(card.value))\n            }\n        })\n\n        // Get the total of the values of the array\n        let pokemonTwoTotal = cardValuesArray.reduce((a, b) => a + b, 0);\n\n        // Check for if pokemonTwo's total is greater than 21, and if there is an Ace in the hand; if yes, change the value of the Ace to 1\n        while (pokemonTwoTotal > 21 && cardValuesArray.includes(11)) {\n            cardValuesArray[cardValuesArray.indexOf(11, 0)] = 1;\n            pokemonTwoTotal = cardValuesArray.reduce((a, b) => a + b, 0);\n        }\n\n        // Set state for pokemonTwoCardsValue to be the total value of their cards\n        this.setState({\n            pokemonTwoCardsValue: pokemonTwoTotal\n        }, () => {\n            this.standButtonPokemonTwo();\n        })\n    }\n\n\n    // Function for when Pokemon One clicks \"Stand\" button\n    standButtonPokemonOne = () => {\n        // On click of the \"Stand Button\":\n        // (1) call the checkPokemonOneScore function, so that we can update state for pokemonOneCardsValue, and store the total value of the cards there\n        this.checkPokemonOneScore();\n        \n        // When the stand button is clicked, disable button functionality for player 1 and enable button functionality for player 2\n        this.setState({\n            buttonDisabledOne: true,\n            buttonDisabledTwo: false\n        })\n\n        \n    }\n\n    // Function for when Pokemon Two clicks \"Stand\" button\n    standButtonPokemonTwo = () => {\n        // On click of the \"Stand Button\":\n        // (1) call the checkPokemonTwoScore function, so that we can update state for pokemonTwoCardsValue, and store the total value of the cards there\n    \n        const playerOneScore = this.state.pokemonOneCardsValue;\n        const playerTwoScore = this.state.pokemonTwoCardsValue;\n\n        if (playerOneScore > playerTwoScore) {\n            if (playerOneScore <= 21) {\n                this.setState({\n                    pokemonOneWins: true,\n                    winnerDisabled: false\n                });\n            } else if (playerOneScore > 21) {\n                this.setState({\n                    pokemonTwoWins: true,\n                    winnerDisabled: false\n                });\n            }\n        } else if (playerTwoScore > playerOneScore) {\n            if (playerTwoScore <= 21) {\n                this.setState({\n                    pokemonTwoWins: true,\n                    winnerDisabled: false\n                });\n            } else if (playerTwoScore > 21) {\n                this.setState({\n                    pokemonOneWins: true,\n                    winnerDisabled: false\n                });\n            }\n        } else if (playerOneScore === playerTwoScore) {\n            if ( playerOneScore > 21 && playerTwoScore > 21) {\n                this.setState({\n                    noWinners: true,\n                    winnerDisabled: true\n                });\n            } else if (playerOneScore <= 21 && playerTwoScore <= 21) {\n                this.setState({\n                    tieGame: true,\n                    winnerDisabled: true\n                });\n            }\n        } \n    }\n\n    componentDidMount = () => {\n        this.getPokemonOne();\n        this.getPokemonTwo();\n        this.getDeckOfCards();\n    }\n\n    render() {\n        return (\n            <Router basename={process.env.PUBLIC_URL}>\n                <div className=\"App\">\n                    <Route exact path=\"/\" component= { Home } />\n\n                    <Route \n                        path=\"/BattleScreen\" \n                        render={ () => \n                            <BattleScreen \n                                passPokemonInfo={ this.state } \n                                pokemonOneDrawCard={ () => this.drawCardPokemonOne() }\n                                pokemonTwoDrawCard={ () => this.drawCardPokemonTwo() }\n                                pokemonOneStandButton={ () => this.standButtonPokemonOne() }\n                                pokemonTwoCheckScoreButton={ () => this.checkPokemonTwoScore() }\n                            /> } />\n\n                    <Route \n                        path=\"/Winner\" \n                        render= { () => <Winner passState= {this.state} />} \n                    />\n                        \n                    <Footer />\n                </div>\n            </Router>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}