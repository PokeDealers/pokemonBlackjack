{"version":3,"sources":["BattleScreen.js","Home.js","Winner.js","App.js","serviceWorker.js","index.js"],"names":["BattleScreen","props","to","className","Home","Winner","App","componentDidMount","numGenerator","Math","floor","random","axios","url","responseType","method","then","res","console","log","state","pokemon","playerOneCards","playerTwoCards","deckOfCards","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8TAkDeA,G,MApBM,SAACC,GACd,OACI,6BACI,6BACI,0DAMJ,kBAAC,IAAD,CAAMC,GAAG,WAAU,4BAAQC,UAAU,eAAlB,2BCjBpBC,EApBF,WACL,OACI,6BACI,gCACI,yBAAKD,UAAU,uBACf,wBAAIA,UAAU,cAAd,4CAIJ,6BAASA,UAAU,sBACf,kcAGJ,kBAAC,IAAD,CAAMD,GAAG,iBAAgB,4BAAQC,UAAU,eAAlB,iBCH1BE,EATA,WACX,OACI,yBAAKF,UAAU,wBACX,wBAAIA,UAAU,eAAd,6BACA,kBAAC,IAAD,CAAMD,GAAG,KAAI,4BAAQC,UAAU,eAAlB,cC2IVG,E,kDApEX,aAAe,IAAD,8BACV,gBAmBJC,kBAAoB,WAEhB,IAAMC,EAAeC,KAAKC,MAAsB,IAAhBD,KAAKE,UAErCC,IAAM,CACEC,IAAI,qCAAD,OAAuCL,GAC1CM,aAAc,OACdC,OAAQ,QAEfC,MAAM,SAACC,GACJC,QAAQC,IAAIF,OA5BhB,EAAKG,MAAQ,CACTC,QAAS,GACTC,eAAgB,GAChBC,eAAgB,GAChBC,YAAa,IANP,E,qDAkDV,OACI,kBAAC,IAAD,KACI,yBAAKrB,UAAU,OACX,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,IAAIC,UAAavB,IACnC,kBAAC,IAAD,CAAOsB,KAAK,gBAAgBC,UAAY3B,IACxC,kBAAC,IAAD,CAAO0B,KAAK,UAAUC,UAAYtB,U,GAxDpCuB,aClEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.25f70322.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Route, Link } from 'react-router-dom';\nimport './styles.css';\n\n//BattleScreen.js\n// Low - i icon appears to remind player of the rules\n// High - The two pokemon battling are displayed as well as the cards\n// High - Accept the props: \n// The buttons are visible and functional(Stand and draw)\n//Game logic:\n    //Create logic for game\n    //Generate random cards and display them (axios) and keep a counter for players. Start with two cards and store those into variables \n    //Store players' current scores and also their numbers (value of their cards) in the game.\n    //Create two buttons, one for Standing and one for drawing.\n        //- For the stand button, keep the players cards as is, and move on\n        //- For the drawing button, give the player a new card.\n    //When a player has a total card value of more than 21, alert that player that they are bust (Ternary operators if condition) \n    //When a player has a natural, they win automatically, unless another player has a natural. (Natural is a 10 or face card with an ace)\n    //The player with the highest score without going over is the winner (one win)\n    //Winner is taken to a new screen! (display pokemon)\n    //Stretch: Style like pokemon battle screen.\n\n    //\t- store Pokemon.id’s into a pokemon[] array\n    //\t- grab two random id’s for Pokemon to play blackjack together and filter through them to only grab the pokemon who can evolve.\n    //\t\t- run the array through a randomizer Math.floor(Math.whatever) * array.length to get the random pokemon\n    //\t\t- store first result in firstPokemon\n    //\t\t- store second result in secondPokemon\n    //Display two Pokemon that will be blackjacking\n    //When there is a winner (MVP: 1 win) the app will take you to a new screen (Winner.js)\n\nconst BattleScreen = (props) => {\n        return (\n            <div>\n                <div>\n                    <h1>THIS IS THE BATTLESCREEN!</h1>\n\n                    \n                    {/* <h2>It's {props.name}</h2>\n                    <img src={props.sprites.front_default} alt={ props.name }/> */}\n                </div>\n                <Link to=\"/Winner\"><button className=\"buttonStyle\">Show me the winner!</button></Link>\n            </div>\n        )\n}\n\n\n\n\n\n\nexport default BattleScreen;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Home = () => {\n        return (\n            <div>\n                <header>\n                    <div className=\"headerTextContainer\">\n                    <h1 className=\"headerText\">PokeDealers presents Pokemon BlackJack</h1>\n                    </div>\n                    \n                </header>\n                <section className=\"instructionSection\">\n                    <p>These will be blackjack instructions. Lorem ipsum dolor sit amet consectetur adipisicing elit. Distinctio animi earum cupiditate magni dolor ea dolore officiis aliquam temporibus blanditiis, aut explicabo. Repellat eveniet eius enim consequuntur nobis esse molestias odio voluptatem, maiores dolorum id suscipit in doloremque dicta illum consectetur facilis! Suscipit, ducimus quasi culpa commodi corporis saepe totam.</p>\n                </section>\n            \n                <Link to=\"/BattleScreen\"><button className=\"buttonStyle\">Start Game</button></Link>\n                \n            </div>\n        )\n    }\n\n\nexport default Home;\n","import React from 'react'\nimport { Link } from 'react-router-dom';\nimport './styles.css';\n\nconst Winner = () => {\n    return (\n        <div className=\"specialTextContainer\">\n            <h1 className=\"specialText\">Congratulations, you won!</h1>\n            <Link to=\"/\"><button className=\"buttonStyle\">GO HOME</button></Link>\n        </div>\n    )\n}\n\nexport default Winner;\n;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom' \nimport axios from 'axios'\nimport BattleScreen from './BattleScreen';\nimport Home from './Home';\nimport Winner from './Winner';\nimport './styles.css';\n\n\n//When user lands on page, they will be shown a “Pokemon blackjack instructions” screen that shows instructions of blackjack which is Home.js\n//When user clicks “ok” that will link to the game screen\n//On application start, store all the Pokemon into a Pokemon array\n//\t- create an axios call to the Pokemon api \n\n//Create logic for game\n    //Generate random cards and display them (axios) and keep a counter for players. Start with two cards and store those into variables \n    //Store players' current scores and also their numbers (value of their cards) in the game.\n    //Create two buttons, one for Standing and one for drawing.\n        //- For the stand button, keep the players cards as is, and move on\n        //- For the drawing button, give the player a new card.\n    //When a player has a total card value of more than 21, alert that player that they are bust (Ternary operators if condition) \n    //When a player has a natural, they win automatically, unless another player has a natural. (Natural is a 10 or face card with an ace)\n    //The player with the highest score without going over is the winner (one win)\n    //Winner is taken to a new screen! (display pokemon)\n    //Stretch: Style like pokemon battle screen.\n\n//\t- store Pokemon.id’s into a pokemon[] array\n//\t- grab two random id’s for Pokemon to play blackjack together and filter through them to only grab the pokemon who can evolve.\n//\t\t- run the array through a randomizer Math.floor(Math.whatever) * array.length to get the random pokemon\n//\t\t- store first result in firstPokemon\n//\t\t- store second result in secondPokemon\n//Display two Pokemon that will be blackjacking\n//When there is a winner (MVP: 1 win) the app will take you to a new screen (Winner.js)\n\n//App.js\n//Have a header that accurately describes the functionality of the app, as well as introduce the app with some style. 'Two friends battle it out'\n//Picture of pokeball (or something decorative)\n//Display basic rules of blackjack must be displayed on the intro screen.\n//Have a button to start the game\n//Pass props down to the battlescreen.js\n    // The pokemon that are battling, cards\n\n\n//BattleScreen.js\n// i icon appears to remind player of the rules\n// The two pokemon battling are displayed as well as the cards\n// Accept the props: \n// The buttons are visible and functional(Stand and draw)\n//Game logic:\n    //Create logic for game\n    //Generate random cards and display them (axios) and keep a counter for players. Start with two cards and store those into variables \n    //Store players' current scores and also their numbers (value of their cards) in the game.\n    //Create two buttons, one for Standing and one for drawing.\n        //- For the stand button, keep the players cards as is, and move on\n        //- For the drawing button, give the player a new card.\n    //When a player has a total card value of more than 21, alert that player that they are bust (Ternary operators if condition) \n    //When a player has a natural, they win automatically, unless another player has a natural. (Natural is a 10 or face card with an ace)\n    //The player with the highest score without going over is the winner (one win)\n    //Winner is taken to a new screen! (display pokemon)\n    //Stretch: Style like pokemon battle screen.\n\n    //\t- store Pokemon.id’s into a pokemon[] array\n    //\t- grab two random id’s for Pokemon to play blackjack together and filter through them to only grab the pokemon who can evolve.\n    //\t\t- run the array through a randomizer Math.floor(Math.whatever) * array.length to get the random pokemon\n    //\t\t- store first result in firstPokemon\n    //\t\t- store second result in secondPokemon\n    //Display two Pokemon that will be blackjacking\n    //When there is a winner (MVP: 1 win) the app will take you to a new screen (Winner.js)\n\n\n//Winner.js\n//Heading saying '{ this.pokemon } has won'\n//Show a picture of the pokmemon (using the api)\n//Button saying play again (brings you back to the initial screen)\n//Pokemon should evolve!\n\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            pokemon: [], // store all the pokemon into initial state\n            playerOneCards: [],\n            playerTwoCards: [],\n            deckOfCards: []\n        }\n    }\n\n    // pokemonCall = () => {\n    //     axios({\n    //         url: 'https://pokeapi.co/api/v2/pokemon',\n    //         responseType: 'json',\n    //         method: 'GET',\n    //     }).then( (res) => {\n    //         console.log(res);\n    //     })\n    // }\n\n    componentDidMount = () => {\n\n        const numGenerator = Math.floor(Math.random() * 964);\n\n        axios({\n                url: `https://pokeapi.co/api/v2/pokemon/${numGenerator}`  ,\n                responseType: 'json',\n                method: 'GET',\n        })\n        .then( (res) => {\n            console.log(res);\n        })\n\n        \n        \n\n       // const randomNumber = Math.ceil(Math.random() * 200);\n\n        // Getting a random pokemon that evolves, and assigning this pokemon to either player 1 or 2\n        // axios({\n        //     url: `https://pokeapi.co/api/v2/evolution-chain/${randomNumber}/`,\n        //     responseType: 'json',\n        //     method: 'GET',\n        // }).then( (res) => {\n        //     console.log(res.data.chain.evolves_to);\n        // })\n    }\n\n\n    render() {\n        return (\n            <Router>\n                <div className=\"App\">\n                    <Route exact path=\"/\" component= { Home } />\n                    <Route path=\"/BattleScreen\" component={ BattleScreen } />\n                    <Route path=\"/Winner\" component={ Winner } />\n\n                    {/* <nav>\n                        <Link to=\"/BattleScreen\">BattleScreen</Link>\n                    </nav> */}\n\n                </div>\n            </Router>\n        )\n\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}